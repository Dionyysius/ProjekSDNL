/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Component;


import MST.Vertex;
import java.awt.Image;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Stefanus Saputra
 */
public class main extends javax.swing.JFrame {

    private boolean isClicked = false;
    Graph graph = new Graph();

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        setLocationRelativeTo(null);
//scaleImageMap();
        jPanel4.setFocusable(true);

        graph.addVertex("SD Gembira");//0
        graph.addVertex("Museum Jam");//1
        graph.addVertex("Rumah Gracia");//2
        graph.addVertex("Rumah Step");//3
        graph.addVertex("Tugu Jepang");//4
        graph.addVertex("Indomaret");//5
        graph.addVertex("Perpustakaan");//6
        graph.addVertex("Tempat makan Papua");//7
        graph.addVertex("Lapangan Bulutangkis");//8
        graph.addVertex("Lapangan Tembak");//9
        graph.addVertex("Rumah Chika");//10
        graph.addVertex("Rumah Felix");//11
        graph.addVertex("Rumah Marsha");//12
        graph.addVertex("Gereja");//13
        graph.addVertex("Kolam Renang");//14
        graph.addVertex("Penjara");//15
        graph.addVertex("Rumah Dion");//16
        graph.addVertex("Indramart");//17
        graph.addVertex("Pabrik susu");//18
        graph.addVertex("Kandang Zebra");//19
        graph.addVertex("Rumah Tyo");//20

        graph.addEdge(0, 1, 3);
        graph.addEdge(0, 2, 5);
        graph.addEdge(1, 3, 4);
        graph.addEdge(1, 4, 7);
        graph.addEdge(2, 4, 5);
        graph.addEdge(2, 9, 9);
        graph.addEdge(2, 10, 7);
        graph.addEdge(3, 7, 6);
        graph.addEdge(3, 5, 9);
        graph.addEdge(3, 4, 15);
        graph.addEdge(3, 11, 12);
        graph.addEdge(4, 5, 12);
        graph.addEdge(4, 10, 13);
        graph.addEdge(4, 11, 16);
        graph.addEdge(4, 15, 20);
        graph.addEdge(5, 7, 3);
        graph.addEdge(5, 6, 6);
        graph.addEdge(5, 11, 9);
        graph.addEdge(5, 13, 8);
        graph.addEdge(5, 20, 16);
        graph.addEdge(6, 20, 10);
        graph.addEdge(6, 8, 5);
        graph.addEdge(6, 13, 6);
        graph.addEdge(9, 10, 11);
        graph.addEdge(10, 11, 18);
        graph.addEdge(10, 15, 17);
        graph.addEdge(10, 16, 3);
        graph.addEdge(11, 12, 2);
        graph.addEdge(11, 15, 6);
        graph.addEdge(12, 13, 5);
        graph.addEdge(12, 20, 6);
        graph.addEdge(13, 20, 8);
        graph.addEdge(14, 20, 6);
        graph.addEdge(14, 15, 6);
        graph.addEdge(14, 18, 10);
        graph.addEdge(15, 17, 9);
        graph.addEdge(15, 18, 8);
        graph.addEdge(16, 17, 3);
        graph.addEdge(16, 19, 20);
        graph.addEdge(16, 18, 25);
        graph.addEdge(18, 19, 7);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        login = new Component.Button();
        exit = new Component.Button();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        startVertex = new javax.swing.JTextField();
        endVertex = new javax.swing.JTextField();
        exit1 = new Component.Button();
        next = new Component.Button();
        previous = new Component.Button();
        exit3 = new Component.Button();
        jPanel6 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        shortestPath2 = new javax.swing.JLabel();
        resultTextField = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();
        exit2 = new Component.Button();
        button1 = new Component.Button();
        jLabel8 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 2, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Welcome ");

        login.setBackground(new java.awt.Color(51, 51, 255));
        login.setBorder(null);
        login.setForeground(new java.awt.Color(255, 255, 255));
        login.setText("Next");
        login.setToolTipText("");
        login.setColor(new java.awt.Color(51, 51, 255));
        login.setRadius(40);
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        exit.setText("EXIT");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 3, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Projek SDNL ");

        jLabel4.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Herodion Yulis Putra/225314001");

        jLabel9.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Stefanus Saputra/225314022");

        jLabel11.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Felix Dafinsa Putra Herchandra/225314029");

        jLabel12.setFont(new java.awt.Font("Harrington", 3, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("by :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(551, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jTabbedPane2.addTab("tab1", jPanel2);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Nirmala UI", 3, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Masukan  Posisi dan Tujuan Anda");

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Microsoft Tai Le", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Tempat awal    :");

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Microsoft Tai Le", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Tempat Tujuan :");

        exit1.setText("EXIT");
        exit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit1ActionPerformed(evt);
            }
        });

        next.setBackground(new java.awt.Color(51, 51, 255));
        next.setBorder(null);
        next.setForeground(new java.awt.Color(255, 255, 255));
        next.setText("Next");
        next.setToolTipText("");
        next.setColor(new java.awt.Color(51, 51, 255));
        next.setRadius(40);
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        previous.setBackground(new java.awt.Color(51, 51, 255));
        previous.setBorder(null);
        previous.setForeground(new java.awt.Color(255, 255, 255));
        previous.setText("Previous");
        previous.setColor(new java.awt.Color(51, 51, 255));
        previous.setRadius(40);
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        exit3.setText("MAP");
        exit3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(previous, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(endVertex, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(startVertex, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(exit1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exit3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(187, 187, 187))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(startVertex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(endVertex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(previous, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exit3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane2.addTab("tab2", jPanel1);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel10.setFont(new java.awt.Font("Malgun Gothic Semilight", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Jalur Tercepat menuju ");

        shortestPath2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

        resultTextField.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N

        resultTextArea.setColumns(20);
        resultTextArea.setRows(5);
        jScrollPane1.setViewportView(resultTextArea);

        exit2.setText("EXIT");
        exit2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit2ActionPerformed(evt);
            }
        });

        button1.setBackground(new java.awt.Color(51, 51, 255));
        button1.setBorder(null);
        button1.setForeground(new java.awt.Color(255, 255, 255));
        button1.setText("Previous");
        button1.setColor(new java.awt.Color(51, 51, 255));
        button1.setRadius(40);
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        jLabel8.setText("Berikut adalah Jarak Setiap Rumah : ");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 520, Short.MAX_VALUE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(exit2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shortestPath2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shortestPath2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exit2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        jTabbedPane2.addTab("tab3", jPanel6);

        getContentPane().add(jTabbedPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, -30, 980, 360));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\ACER\\Downloads\\roket.gif")); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 72, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab2", jPanel7);

        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });
        jLabel14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jLabel14KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 7, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("tab1", jPanel4);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -30, 390, 360));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void myButton1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_myButton1StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_myButton1StateChanged

    private void next2ButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_next2ButtonStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_next2ButtonStateChanged

    private void myButton3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_myButton3StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_myButton3StateChanged

    private void myButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myButton1ActionPerformed
        jTabbedPane2.setSelectedIndex(1);
    }//GEN-LAST:event_myButton1ActionPerformed

    private void myButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myButton3ActionPerformed
        jTabbedPane2.setSelectedIndex(0);
    }//GEN-LAST:event_myButton3ActionPerformed

    private void next2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_next2ButtonActionPerformed
        jTabbedPane2.setSelectedIndex(2);

    }//GEN-LAST:event_next2ButtonActionPerformed

    private void myButton4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_myButton4StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_myButton4StateChanged

    private void myButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myButton4ActionPerformed
        jTabbedPane2.setSelectedIndex(1);
    }//GEN-LAST:event_myButton4ActionPerformed

    private void next4ButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_next4ButtonStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_next4ButtonStateChanged

    private void next4ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_next4ButtonActionPerformed
        jTabbedPane2.setSelectedIndex(3);


    }//GEN-LAST:event_next4ButtonActionPerformed

    private void mapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapActionPerformed

        // Periksa kondisi saat tombol diklik
        if (isClicked) {
            // Jika isClicked true, atur indeks ke 0
            jTabbedPane1.setSelectedIndex(0);
        } else {
            // Jika isClicked false, atur indeks ke 1
            jTabbedPane1.setSelectedIndex(1);
//    scaleImageMap();
        }

// Toggle nilai isClicked untuk perubahan di klik berikutnya
        isClicked = !isClicked;

    }//GEN-LAST:event_mapActionPerformed
    public void scaleImageMap() {
        ImageIcon icon = new ImageIcon(getClass().getResource("/Image/map.jpg"));
        Image img = icon.getImage();
        Image imgScale = img.getScaledInstance(jLabel14.getWidth(), jLabel14.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imgScale);
        jLabel14.setIcon(scaledIcon);
    }
    private void map1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_map1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_map1ActionPerformed

    private void map2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_map2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_map2ActionPerformed

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked

    }//GEN-LAST:event_jLabel14MouseClicked

    private void jLabel14KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel14KeyPressed

    }//GEN-LAST:event_jLabel14KeyPressed

    private void exit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exit1ActionPerformed

    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        jTabbedPane2.setSelectedIndex(0);
    }//GEN-LAST:event_previousActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        try {
            if (startVertex.getText().isEmpty() || endVertex.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mohon isi kedua vertex terlebih dahulu.");
                return;

            }
            if (!graph.containsVertex(startVertex.getText()) || !graph.containsVertex(endVertex.getText())) {
                JOptionPane.showMessageDialog(this, "Salah satu atau kedua vertex tidak sesuai.");
                return;

            }
            jTabbedPane2.setSelectedIndex(2);
            graph.shortestPathByVertexNames(startVertex.getText(), endVertex.getText());

//       graph.kruskalMSTByVertexNames(startVertex.getText(), endVertex.getText());
            graph.shortestPathKruskal(startVertex.getText(), endVertex.getText());

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + ex.getMessage());
            ex.printStackTrace();

        }

        jTabbedPane2.setSelectedIndex(2);
        graph.shortestPathByVertexNames(startVertex.getText(), endVertex.getText());

//       graph.kruskalMSTByVertexNames(startVertex.getText(), endVertex.getText());
        graph.shortestPathKruskal(startVertex.getText(), endVertex.getText());


    }//GEN-LAST:event_nextActionPerformed

    private void exit2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exit2ActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        jTabbedPane2.setSelectedIndex(1);
    }//GEN-LAST:event_button1ActionPerformed

    private void exit3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit3ActionPerformed
        new Map().setVisible(true);
    }//GEN-LAST:event_exit3ActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        jTabbedPane2.setSelectedIndex(1);
    }//GEN-LAST:event_loginActionPerformed

    public class Graph {

        private int maxVerts;
        private int nVerts;
        private Vertex[] vertexList;
        private int[][] adjMatrix;

        public Graph() {
            this.maxVerts = 30;
            this.nVerts = 0;
            vertexList = new Vertex[maxVerts];
            adjMatrix = new int[maxVerts][maxVerts];
            for (int i = 0; i < maxVerts; i++) {
                for (int j = 0; j < maxVerts; j++) {
                    adjMatrix[i][j] = 0;
                }
            }
        }

        public Graph(int maxVerts) {
            this.maxVerts = maxVerts;
            this.nVerts = 0;
            vertexList = new Vertex[maxVerts];
            adjMatrix = new int[maxVerts][maxVerts];
            for (int i = 0; i < maxVerts; i++) {
                for (int j = 0; j < maxVerts; j++) {
                    adjMatrix[i][j] = 0;
                }
            }
        }

        public void addVertex(String label) {
            vertexList[nVerts++] = new Vertex(label);
        }

        public void addEdge(int start, int end, int weight) {
            adjMatrix[start][end] = weight;
            adjMatrix[end][start] = weight;
        }

        public void addArrowedEdge(int start, int end) {
            adjMatrix[start][end] = 1;
        }

        public void addArrowedEdge(int start, int end, int weight) {
            adjMatrix[start][end] = weight;
        }

        public String displayVertex(int v) {
            return vertexList[v].getLabel();
        }

        public int getnVerts() {
            return nVerts;
        }

        private int minDistance(int[] distance, boolean[] visited) {
            int min = Integer.MAX_VALUE;
            int minIndex = -1;

            for (int v = 0; v < nVerts; v++) {
                if (!visited[v] && distance[v] <= min) {
                    min = distance[v];
                    minIndex = v;
                }
            }

            return minIndex;
        }

        private void kruskalMST(int startVertex, int endVertex, List<Edge> path1, List<Edge> path2) {
            // Generate edges from the graph
            Edge[] edges = generateEdges();

            // Sort edges based on their weights
            Arrays.sort(edges);

            // Create a Union-Find data structure to track sets
            UnionFind uf = new UnionFind(nVerts);

            // To store the resulting MST
            List<Edge> mst = new ArrayList<>();

            // Traverse through the sorted edges
            for (Edge edge : edges) {
                int source = edge.source;
                int destination = edge.destination;

                // Check if including the edge creates a cycle or not
                if (!uf.connected(source, destination)) {
                    mst.add(edge); // Add edge to the MST
                    uf.union(source, destination); // Merge sets of source and destination
                }
            }

            // Display the MST in the JTextArea
            resultTextArea.append("Minimum Spanning Tree:\n");
            for (Edge edge : mst) {
                resultTextArea.append(
                        vertexList[edge.source].getLabel() + " - "
                        + vertexList[edge.destination].getLabel() + ": "
                        + edge.weight + "\n");
            }

            // Display the paths in the JTextArea
            resultTextArea.append("\nShortest Path 1:\n");
            displayPath(startVertex, endVertex, path1);

            resultTextArea.append("\nShortest Path 2:\n");
            displayPath(startVertex, endVertex, path2);
        }

        // Helper method to display the path in the JTextArea
        private void displayPath(int startVertex, int endVertex, List<Edge> path) {
            for (Edge edge : path) {
                resultTextArea.append(
                        vertexList[edge.source].getLabel() + " -> "
                        + vertexList[edge.destination].getLabel() + ": "
                        + edge.weight + "\n");
            }
        }

        private boolean containsVertex(String vertexLabel) {
                 for (int i = 0; i < nVerts; i++) {
        if (vertexList[i] != null && vertexList[i].getLabel().equals(vertexLabel)) {
            return true; // Jika vertex ditemukan dalam daftar vertex
        }
    }
    return false; // Jika tidak ditemukan
                }

        // Method untuk mencari semua edge dalam graf
        // Kelas untuk merepresentasikan edge
        class Edge implements Comparable<Edge> {

            int source, destination, weight;

            Edge(int source, int destination, int weight) {
                this.source = source;
                this.destination = destination;
                this.weight = weight;
            }

            @Override
            public int compareTo(Edge compareEdge) {
                return this.weight - compareEdge.weight;
            }
        }

        // Kelas untuk merepresentasikan subset dari himpunan vertex
        class Subset {

            int parent, rank;
        }

        public void shortestPathBetweenVertices(int startVertex, int endVertex) {
            // Array untuk menyimpan jarak terpendek dari startVertex ke setiap vertex
            int[] distance = new int[maxVerts];
            Arrays.fill(distance, Integer.MAX_VALUE); // Mengisi awal dengan nilai tak terhingga
            distance[startVertex] = 0;

            // Array untuk menyimpan informasi apakah vertex sudah dikunjungi atau belum
            boolean[] visited = new boolean[maxVerts];

            // Proses Dijkstra
            for (int count = 0; count < nVerts; count++) {
                int u = minDistance(distance, visited);
                visited[u] = true;

                for (int v = 0; v < nVerts; v++) {
                    if (!visited[v] && adjMatrix[u][v] != 0 && distance[u] != Integer.MAX_VALUE
                            && distance[u] + adjMatrix[u][v] < distance[v]) {
                        distance[v] = distance[u] + adjMatrix[u][v];
                    }
                }
            }

            // Menampilkan hasil shortest path antara kedua vertex
            shortestPath2.setText("Untuk ke " + vertexList[endVertex].getLabel() + " dari " + vertexList[startVertex].getLabel()
                    + " menempuh " + (distance[endVertex] == Integer.MAX_VALUE ? "Tidak terhubung" : distance[endVertex]) + " meter "
            );

        }

        public void shortestPathByVertexNames(String startVertexLabel, String endVertexLabel) {
            int startIndex = -1;
            int endIndex = -1;

            // Mencari indeks dari startVertexLabel dan endVertexLabel
            for (int i = 0; i < nVerts; i++) {
                if (vertexList[i].getLabel().equals(startVertexLabel)) {
                    startIndex = i;
                }
                if (vertexList[i].getLabel().equals(endVertexLabel)) {
                    endIndex = i;
                }
                if (startIndex != -1 && endIndex != -1) {
                    break;
                }
            }

            // Memastikan kedua vertex ditemukan sebelum memanggil shortestPathBetweenVertices
            if (startIndex != -1 && endIndex != -1) {
                shortestPathBetweenVertices(startIndex, endIndex);
                shortestPathBetweenVertices1(startIndex, endIndex);
            } else {
                System.out.println("Vertex tidak ditemukan.");
            }
        }

        private Edge[] generateEdges() {
            Edge[] edges = new Edge[nVerts * nVerts]; // Anda bisa menyesuaikan dengan jumlah maksimal edge yang mungkin
            int edgeCount = 0;
            for (int i = 0; i < nVerts; i++) {
                for (int j = 0; j < nVerts; j++) {
                    if (adjMatrix[i][j] != 0) {
                        edges[edgeCount++] = new Edge(i, j, adjMatrix[i][j]);
                    }
                }
            }
            return Arrays.copyOf(edges, edgeCount);
        }

        class UnionFind {

            int[] parent;
            int[] rank;

            public UnionFind(int size) {
                parent = new int[size];
                rank = new int[size];

                // Set semua parent awal ke diri sendiri dan rank ke 0
                for (int i = 0; i < size; i++) {
                    parent[i] = i;
                    rank[i] = 0;
                }
            }

            // Method untuk mencari representatif dari suatu set
            public int find(int x) {
                if (parent[x] != x) {
                    parent[x] = find(parent[x]);
                }
                return parent[x];
            }

            // Method untuk menggabungkan dua set
            public void union(int x, int y) {
                int xRoot = find(x);
                int yRoot = find(y);

                if (xRoot == yRoot) {
                    return;
                }

                if (rank[xRoot] < rank[yRoot]) {
                    parent[xRoot] = yRoot;
                } else if (rank[xRoot] > rank[yRoot]) {
                    parent[yRoot] = xRoot;
                } else {
                    parent[yRoot] = xRoot;
                    rank[xRoot]++;
                }
            }

            // Method untuk mengecek apakah dua elemen berada dalam set yang sama
            public boolean connected(int x, int y) {
                return find(x) == find(y);
            }
        }

        public void displayKruskalMST() {
            // Clear previous text
            resultTextArea.setText("");

            // Generate edges from the graph
            Edge[] edges = generateEdges();

            // Sort edges based on their weights
            Arrays.sort(edges);

            // Create a Union-Find data structure to track sets
            UnionFind uf = new UnionFind(nVerts);

            // To store the resulting MST
            List<Edge> mst = new ArrayList<>();

            // Traverse through the sorted edges
            for (Edge edge : edges) {
                int source = edge.source;
                int destination = edge.destination;

                // Check if including the edge creates a cycle or not
                if (!uf.connected(source, destination)) {
                    mst.add(edge); // Add edge to the MST
                    uf.union(source, destination); // Merge sets of source and destination
                }
            }

            // Display the Minimum Spanning Tree in the JTextArea
            resultTextArea.append("Minimum Spanning Tree:\n");
            for (Edge edge : mst) {
                resultTextArea.append(
                        vertexList[edge.source].getLabel() + " - "
                        + vertexList[edge.destination].getLabel() + ": "
                        + edge.weight + " meter " + "\n");
            }
        }

        public void kruskalMSTByVertexNames(String startVertexLabel, String endVertexLabel) {
            int startIndex = -1;
            int endIndex = -1;

            // Mencari indeks dari startVertexLabel dan endVertexLabel
            for (int i = 0; i < nVerts; i++) {
                if (vertexList[i].getLabel().equals(startVertexLabel)) {
                    startIndex = i;
                }
                if (vertexList[i].getLabel().equals(endVertexLabel)) {
                    endIndex = i;
                }
                if (startIndex != -1 && endIndex != -1) {
                    break;
                }
            }

            // Memastikan kedua vertex ditemukan sebelum memanggil kruskalMST
            if (startIndex != -1 && endIndex != -1) {
                displayKruskalMST();
            } else {
                System.out.println("Vertex tidak ditemukan.");
            }
        }

        public void shortestPathKruskal(String startVertexLabel, String endVertexLabel) {
            int startIndex = -1;
            int endIndex = -1;

            // Mencari indeks dari startVertexLabel dan endVertexLabel
            for (int i = 0; i < nVerts; i++) {
                if (vertexList[i].getLabel().equals(startVertexLabel)) {
                    startIndex = i;
                }
                if (vertexList[i].getLabel().equals(endVertexLabel)) {
                    endIndex = i;
                }
                if (startIndex != -1 && endIndex != -1) {
                    break;
                }
            }

            // Memastikan kedua vertex ditemukan sebelum memanggil kruskalMST
            if (startIndex != -1 && endIndex != -1) {
                List<Edge> mst = kruskalMST1(startIndex, endIndex);
                if (mst != null) {
                    // Clear previous text
                    resultTextArea.setText("");

                    // Append the path to the TextArea
                    resultTextArea.append("Jalur Terpendek dari " + startVertexLabel + " to " + endVertexLabel + ":\n");

                    for (Edge edge : mst) {
                        String path = vertexList[edge.source].getLabel() + " <-> "
                                + vertexList[edge.destination].getLabel() + ": "
                                + edge.weight + " meter " + "\n";

                        // Append each edge to the TextArea
                        resultTextArea.append(path);
                    }
                } else {
                    // Update the TextArea with the no path found message
                    resultTextArea.setText("No path found between " + startVertexLabel + " and " + endVertexLabel);
                }
            } else {
                // Update the TextArea with the vertex not found message
                resultTextArea.setText("Vertex tidak ditemukan.");
            }
        }

        public List<Edge> kruskalMST1(int startVertex, int endVertex) {
            Edge[] edges = generateEdges();
            Arrays.sort(edges);

            UnionFind uf = new UnionFind(nVerts);
            List<Edge> mst = new ArrayList<>();

            for (Edge edge : edges) {
                int source = edge.source;
                int destination = edge.destination;

                if (!uf.connected(source, destination)) {
                    mst.add(edge);
                    uf.union(source, destination);
                }
            }

            return mst;
        }

        public void shortestPathBetweenVertices1(int startVertex, int endVertex) {
            int[] distance = new int[maxVerts];
            int[] prevVertex = new int[maxVerts]; // Untuk menyimpan vertex sebelumnya dalam jalur terpendek

            Arrays.fill(distance, Integer.MAX_VALUE);
            distance[startVertex] = 0;

            boolean[] visited = new boolean[maxVerts];

            for (int count = 0; count < nVerts; count++) {
                int u = minDistance(distance, visited);
                visited[u] = true;

                for (int v = 0; v < nVerts; v++) {
                    if (!visited[v] && adjMatrix[u][v] != 0 && distance[u] != Integer.MAX_VALUE
                            && distance[u] + adjMatrix[u][v] < distance[v]) {
                        distance[v] = distance[u] + adjMatrix[u][v];
                        prevVertex[v] = u; // Simpan vertex sebelumnya
                    }
                }
            }

            // Cetak jalur yang dilalui
            printPath(startVertex, endVertex, prevVertex);
        }

        private void printPath(int startVertex, int endVertex, int[] prevVertex) {
            LinkedList<Integer> path = new LinkedList<>();
            int currentVertex = endVertex;

            // Build the path from back (from endVertex to startVertex)
            while (currentVertex != startVertex) {
                path.addFirst(currentVertex);
                currentVertex = prevVertex[currentVertex];
            }
            path.addFirst(startVertex);

            // Append the path to the TextField
            resultTextField.setText("Jalur Terpendek dari " + vertexList[startVertex].getLabel() + " ke "
                    + vertexList[endVertex].getLabel() + ": ");

            for (int vertex : path) {
                resultTextField.setText(resultTextField.getText() + vertexList[vertex].getLabel() + " ");
            }

            resultTextField.setText(resultTextField.getText() + "\n");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Component.Button button1;
    private javax.swing.JTextField endVertex;
    private Component.Button exit;
    private Component.Button exit1;
    private Component.Button exit2;
    private Component.Button exit3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private Component.Button login;
    private Component.Button next;
    private Component.Button previous;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JLabel resultTextField;
    private javax.swing.JLabel shortestPath2;
    private javax.swing.JTextField startVertex;
    // End of variables declaration//GEN-END:variables
}
